High level view:

- Ghost hunter entering haunted castle
- can explore castle 
	-(MAP? display more information upon discovery?)
- Upon defeating a ghost, collect the soul to be released at the end
- Find items / clues about ghost motivations to defeat them?? (May be too complex)


Class breakdown:

- Dialogue handler
	- Arrays of options
	- Function abstracting input handling
	- General text premade

- Program 
	- Setup
	- RunGame

- Obstacles (Abstract Class, handle fail state)
	- Child class ghosts 
		- Randomly generate / attatch to rooms?
	- Child class traps
		- stairs, other dangerous locations

- GhostHunter 
	- array of items found
	- Health
	- number of souls collected

- Item
	- Child class key
		- Specific ones for certain rooms, cannot be inside of room it unlocks
	- Child class loot
		- Coins, cool glass, etc
		- Helpful things like rope
	- Child class memento (can be used to defeat ghost if belongs to ghost)
		- Diary 
		- Locket
		- Weapon (if how ghost died, enrage)

- Room
	- If locked, has cooresponding key




GRADING CRITERIA:

5 classes minmum(>= 3 member variables)
	>= 2 inherited in some way
Some type of polymorphic behavior
Recursion of some kind
Some type of loop
Do not use default constructor (MAKE CONSTRUCTORS)
>= 1 example of method overloading 
For derived classes
	>= 1 new var not part of parent classs
	show meaningful purpose for being derived
	>= 1 overriden method
Rooms created and stored via a linked list (graph)
	may contain enemy to fight or loot to collect
Take user input in accounts to make choices 
	can choose directions to progress to
	can choose action to fight entity in room
When battle won -> should win item stored in array or list
give user option to use an item from stack to win battle or unlock door
upon exit or @ any point upon request, list remaining items in stack